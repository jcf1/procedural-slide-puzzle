{"version":3,"sources":["components/Square.jsx","components/Player.jsx","helpers/constants.js","components/Goal.jsx","components/Block.jsx","components/Board.jsx","components/Game.jsx","index.js","components/PuzzleMaker.js"],"names":["style","size","position","color","width","height","top","left","backgroundColor","border","props","Player","bounds","block","i","this","size_percent","pos","goal","blocks","direction","playerDeath","win","length","playerStop","Square","Component","Goal","Block","Board","margin","boardSize","updatePlayerPos","state","playerPos","playerDir","setState","positionCalc","blockWidth","y","x","blockSize","blockSize_percent","goalPos","handleKeyPress","bind","e","keyCode","start","blockHeight","blockWidth_percent","blockHeight_percent","map","window","onkeydown","playerInterval","setInterval","prevProps","seed","update","current","key","getRandomSeed","Math","floor","random","Game","makeNewPuzzle","puzzle","PuzzleMaker","makePuzzle","fake","buttonClicked","document","getElementById","value","newSeed","reset","windowSize","updateWindowDimensions","addEventListener","removeEventListener","innerWidth","innerHeight","className","type","min","id","defaultValue","onChange","prevState","onClick","root","render","Position","hash","seededRandom","max","rnd","round","solution","reachPositions","incomingDirections","solutionPositions","playerPositions","playerPositions_hash","blockPositions","unusedNextPositions","oppositeDirection","action","computePossibleNextPositions","index","vertOrHori","j","next","change","temp","options","leftup","rightdown","push","currSolPositions","leftRemove","includes","has","rightRemove","splice","upRemove","downRemove","computePossibleEndPositions","get","computeReachability","prev_reachSet","prev_incomingSet","reachSet","incomingSet","set","posQueue","dirQueue","possibilities","pop","shift","repeat","addPosition","pos1","pos2","addPositions","Map","addBlock","removePosition","generatePath","startVertOrHori","tryStart","count","success","generateStartMove","generateEndMove","generateSingleMove","nextPos","directionIdx","possibleNext","isReach","testPos","addFakePosition","combined_allPositions","new_pos","pathDirection","remainingStarts","fake_blocks","end","numBlocks","old_reachSet","old_incomingSet","keys","pos_hash","reachNotAll","possible","arr","split","Number","addFakeBlocks","concat","module","exports"],"mappings":"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","file":"static/js/main.6104c8ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst style = ({ size, position, color }) => {\r\n    return {\r\n        position: \"absolute\",\r\n        width: size.width + \"px\",\r\n        height: size.height + \"px\",\r\n        top: position.top + '%',\r\n        left: position.left + '%',\r\n        backgroundColor: color,\r\n        border: \"1px solid #ffffff\"\r\n    };\r\n};\r\n\r\nexport default (props) => <div style={style(props)}/>","import React, { Component } from 'react';\r\nimport Square from './Square.jsx';\r\nimport { UP,LEFT,DOWN,RIGHT } from '../helpers/constants';\r\n\r\nexport default class Player extends Component {\r\n    \r\n    // Check if going out of bounds, hit block, or reach goal\r\n    componentDidUpdate() {\r\n        let bounds;\r\n\r\n        var block;\r\n        var i;\r\n\r\n        let size = this.props.size_percent;\r\n        let pos = this.props.position;\r\n        let goal = this.props.goal;\r\n        let blocks = this.props.blocks;\r\n\r\n        switch(this.props.direction) {\r\n            case UP:\r\n                bounds = 0;\r\n                if(pos.top <= bounds) {\r\n                    this.props.playerDeath();\r\n                } else if((pos.left === goal.left) && (pos.top === (goal.top + size.height))) {\r\n                    this.props.win();\r\n                } else {\r\n                    for(i = 0; i < blocks.length; i++) {\r\n                        block = blocks[i];\r\n                        if((pos.left === block.left) && (pos.top === (block.top + size.height))) {\r\n                            this.props.playerStop()\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case LEFT:\r\n                bounds = 0;\r\n                if(pos.left <= bounds) {\r\n                    this.props.playerDeath();\r\n                } else if((pos.top === goal.top) && (pos.left === (goal.left + size.width))) {\r\n                    this.props.win();\r\n                } else {\r\n                    for(i = 0; i < blocks.length; i++) {\r\n                        block = blocks[i];\r\n                        if((pos.top === block.top) && (pos.left === (block.left + size.width))) {\r\n                            this.props.playerStop()\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case RIGHT:\r\n                bounds = 100;\r\n                if((pos.left + size.width) >= bounds) {\r\n                    this.props.playerDeath();\r\n                } else if((pos.top === goal.top) && ((pos.left + size.width) === goal.left)) {\r\n                    this.props.win();\r\n                } else {\r\n                    for(i = 0; i < blocks.length; i++) {\r\n                        block = blocks[i];\r\n                        if((pos.top === block.top) && ((pos.left + size.width) === block.left)) {\r\n                            this.props.playerStop()\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case DOWN:\r\n                bounds = 100;\r\n                if((pos.top + size.height) >= bounds) {\r\n                    this.props.playerDeath();\r\n                } else if((pos.left === goal.left) && ((pos.top + size.height) === goal.top)) {\r\n                    this.props.win();\r\n                } else {\r\n                    for(i = 0; i < blocks.length; i++) {\r\n                        block = blocks[i];\r\n                        if((pos.left === block.left) && ((pos.top + size.height) === block.top)) {\r\n                            this.props.playerStop()\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const size = this.props.size;\r\n        const top = this.props.position.top;\r\n        const left = this.props.position.left;\r\n        return (\r\n            <Square\r\n                size = {size}\r\n                position={{ top, left }}\r\n                color='blue' />\r\n        );\r\n    }\r\n}","export const UP = 'UP';\r\nexport const DOWN = 'DOWN';\r\nexport const LEFT = 'LEFT';\r\nexport const RIGHT = 'RIGHT';\r\nexport const NONE = 'NONE';\r\nexport const LOCK = 'LOCK';\r\n\r\nexport const LEFT_KEY = 37;\r\nexport const UP_KEY = 38;\r\nexport const RIGHT_KEY = 39;\r\nexport const DOWN_KEY = 40;\r\n\r\nexport const SCREEN_RATIO = 0.6;","import React, { Component } from 'react';\r\nimport Square from './Square.jsx';\r\n\r\nexport default class Goal extends Component {\r\n    render() {\r\n        //const {info: { size, top, left }} = this.props;\r\n        const size = this.props.size;\r\n        const top = this.props.position.top;\r\n        const left = this.props.position.left;\r\n        return (\r\n            <Square\r\n                size = {size}\r\n                position={{ top, left }}\r\n                color='red' />\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Square from './Square.jsx';\r\n\r\nexport default class Block extends Component {\r\n    render() {\r\n        const size = this.props.size;\r\n        const top = this.props.position.top;\r\n        const left = this.props.position.left;\r\n        return (\r\n            <Square\r\n                size = {size}\r\n                position={{ top, left }}\r\n                color='#000000' />\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Player from './Player';\r\nimport Goal from './Goal';\r\nimport Block from './Block';\r\nimport { UP,LEFT,DOWN,RIGHT,NONE,LOCK,UP_KEY,DOWN_KEY,LEFT_KEY,RIGHT_KEY } from '../helpers/constants';\r\n\r\nexport default class Board extends Component {\r\n\r\n  style = () => {\r\n    return {\r\n      position: \"relative\",\r\n      margin: \"1% auto\",\r\n      width: this.props.boardSize + \"px\",\r\n      height: this.props.boardSize + \"px\",\r\n      border: (this.props.boardSize/100) + \"px solid #000000\"\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      blockSize: {\r\n        width: 0,\r\n        height: 0,\r\n        border: 0\r\n      },\r\n      blockSize_percent: {\r\n        width: 0,\r\n        height: 0\r\n      },\r\n      playerPos: {top: 0, left: 0},\r\n      playerDir: LOCK,\r\n      goalPos: {top: 0, left: 0},\r\n      blocks: []\r\n    };\r\n\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    this.playerDeath = this.playerDeath.bind(this);\r\n    this.playerStop = this.playerStop.bind(this);\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if(this.state.playerDir !== NONE) {\r\n      return;\r\n    }\r\n\r\n    let direction;\r\n    switch(e.keyCode) {\r\n        case LEFT_KEY:\r\n            // LEFT\r\n            direction = LEFT;\r\n            break;\r\n        case UP_KEY:\r\n            // UP\r\n            direction = UP;\r\n            break;\r\n        case RIGHT_KEY:\r\n            // RIGHT\r\n            direction = RIGHT;\r\n            break;\r\n        case DOWN_KEY:\r\n            // DOWN\r\n            direction = DOWN;\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n    this.setState({playerDir: direction});\r\n  }\r\n\r\n  updatePlayerPos = () => {\r\n    let pos = this.state.playerPos;\r\n    let dir = this.state.playerDir;\r\n\r\n    switch(dir) {\r\n      case LEFT:\r\n        // LEFT\r\n        pos = {top: pos.top, left: pos.left - 1};\r\n        break;\r\n      case UP:\r\n        // UP\r\n        pos = {top: pos.top - 1, left: pos.left};\r\n        break;\r\n      case RIGHT:\r\n        // RIGHT\r\n        pos = {top: pos.top, left: pos.left + 1};\r\n        break;\r\n      case DOWN:\r\n        // DOWN\r\n        pos = {top: pos.top + 1, left: pos.left};\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    this.setState({playerPos: pos});\r\n  }\r\n\r\n  positionCalc = (pos) => {\r\n    let blockWidth = 100.0/this.props.width;\r\n    let blockHeight = 100.0/this.props.height;\r\n    return ({top: blockHeight * pos.y, left: blockWidth * pos.x});\r\n  };\r\n\r\n  playerDeath() {\r\n    this.setState({\r\n      playerPos: this.positionCalc(this.props.start),\r\n      playerDir: NONE\r\n    });\r\n  }\r\n\r\n  playerStop() {\r\n    this.setState({\r\n      playerDir: NONE\r\n    });\r\n  }\r\n\r\n  win() {\r\n    this.playerDeath();\r\n  }\r\n\r\n  update() {\r\n    let blockWidth  = (((100.0/this.props.width)/100.0) * this.props.boardSize) - 2;\r\n    let blockHeight = (((100.0/this.props.height)/100.0) * this.props.boardSize) - 2;\r\n    let blockBorder = 1;\r\n\r\n    let blockWidth_percent = 100.0/this.props.width;\r\n    let blockHeight_percent = 100.0/this.props.height;\r\n\r\n    this.setState({\r\n      playerPos: this.positionCalc(this.props.start),\r\n      goalPos: this.positionCalc(this.props.goal),\r\n      blocks:  this.props.blocks.map((block,i) => this.positionCalc(block)),\r\n      playerDir: NONE,\r\n      blockSize: {\r\n        width: blockWidth,\r\n        height: blockHeight,\r\n        border: blockBorder\r\n      },\r\n      blockSize_percent: {\r\n        width: blockWidth_percent,\r\n        height: blockHeight_percent\r\n      }\r\n    });\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.setState({ playerPos: this.props.start });\r\n    window.onkeydown = this.handleKeyPress;\r\n    this.playerInterval = setInterval(this.updatePlayerPos, 15);\r\n  }\r\n  \r\n  componentDidUpdate(prevProps) {\r\n    if(this.props.seed !== prevProps.seed || (this.props.blocks.length !== prevProps.blocks.length)) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (      \r\n        <div>\r\n          <div>\r\n            <center><h2>Current Seed: {this.props.current}</h2></center>  \r\n          </div>\r\n          <div style={this.style()}>\r\n            < Player size={this.state.blockSize} size_percent={this.state.blockSize_percent} position={this.state.playerPos} direction={this.state.playerDir} blocks={this.state.blocks} goal={this.state.goalPos} win={this.win} playerDeath={this.playerDeath} playerStop={this.playerStop} />\r\n            < Goal size={this.state.blockSize} position={this.state.goalPos} />\r\n            {\r\n              this.state.blocks.map((block,i) => \r\n              < Block key={i} size={this.state.blockSize} position={block} />)\r\n            }\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport PuzzleMaker from './PuzzleMaker.js';\r\nimport { SCREEN_RATIO } from '../helpers/constants';\r\n\r\nconst getRandomSeed = () => {\r\n    return Math.floor(Math.random() * 1000000000);\r\n}\r\n\r\nexport default class Game extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            windowSize: {\r\n                width: 0,\r\n                height: 0\r\n            },\r\n            start: {y: 0, x: 0},\r\n            goal: {y: 0, x: 0},\r\n            blocks: [],\r\n            seed: -1,\r\n            current: -1,\r\n            width: 20,\r\n            height: 20,\r\n            fake: false\r\n        }\r\n\r\n        this.buttonClicked = this.buttonClicked.bind(this);\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    makeNewPuzzle = (seed) => {\r\n        this.setState({current:seed});\r\n        //Call Puzzle Generation\r\n        let puzzle = PuzzleMaker.makePuzzle(seed, this.state.fake, this.state.width, this.state.height);\r\n        this.setState({start: puzzle.start, goal: puzzle.goal, blocks: puzzle.blocks});\r\n    }\r\n\r\n    buttonClicked = () => {\r\n        let seed = document.getElementById(\"seed-box\").value;\r\n        if(seed < 0 || seed > 1000000000) {\r\n            seed = getRandomSeed();;\r\n            document.getElementById(\"seed-box\").value = seed;\r\n        } \r\n        this.setState({seed: seed});\r\n        this.makeNewPuzzle(seed);\r\n    }\r\n\r\n    newSeed = () => {\r\n        let seed = getRandomSeed();\r\n        this.setState({seed: seed});\r\n        document.getElementById(\"seed-box\").value = seed;\r\n    }\r\n\r\n    reset = () => {\r\n        let seed = getRandomSeed();\r\n        this.setState({seed: seed});\r\n        document.getElementById(\"seed-box\").value = seed;\r\n        this.makeNewPuzzle(seed);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.buttonClicked();\r\n        this.updateWindowDimensions();\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions.bind(this));\r\n    }\r\n    \r\n      componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions.bind(this));\r\n      }\r\n    \r\n      updateWindowDimensions() {\r\n        this.setState({ windowSize : { width: window.innerWidth, height: window.innerHeight } });\r\n      }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"game-options\">\r\n                <div>\r\n                    <label>Random Seed:</label>\r\n                    <input type=\"number\" min=\"0\" id=\"seed-box\" defaultValue={getRandomSeed()} />\r\n                </div>\r\n                <div>\r\n                    <label>Add Fake Blocks:</label>\r\n                    <input id=\"fake-box\" type=\"checkbox\" onChange={(e) => this.setState(prevState => ({fake: !prevState.fake})) } />\r\n                </div>\r\n                <div>\r\n                    <button onClick={this.buttonClicked.bind(this)}>Make Puzzle</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={this.newSeed.bind(this)}>Random Seed</button>\r\n                </div>\r\n                <div>\r\n                    < Board seed={this.state.seed} boardSize={(this.state.windowSize.width > this.state.windowSize.height ? this.state.windowSize.height : this.state.windowSize.width) * SCREEN_RATIO} current={this.state.current} width={this.state.width} height={this.state.height} start={this.state.start} goal={this.state.goal} blocks={this.state.blocks} reset={this.reset.bind(this)} />\r\n                </div>\r\n                <div style={{margin:\"0 auto\", width : (this.state.windowSize.width * 0.75)+\"px\"}}>\r\n                    <div><b>OBJECTIVE:</b>&emsp;Use the arrow keys to move the blue block to the red block by sliding and colliding with the black blocks. If you slide off the board, you will be put back into the starting position.</div>\r\n                    <div><b>OPTIONS:</b>&emsp;&emsp; Change the level by changing the \"Random Seed\" value above and clickint the \"Make Puzzle\" button. The \"Random Seed\" button will generate a new \"Random Seed\" for you. Setting the \"Fake Blocks\" option will add blocks that are not required for the level's solution to the board.</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Game from './components/Game.jsx';\r\n\r\nconst root = document.getElementById('root');\r\n\r\nrender(\r\n  <div>\r\n    <div>\r\n      <header>\r\n        <h1>Procedural Slide Puzzles</h1>\r\n      </header>\r\n    </div>\r\n    <Game/>\r\n  </div>\r\n, root);\r\n","//===================================================\r\n// Position class\r\nfunction Position(y, x) {\r\n    this.y = y;\r\n    this.x = x;\r\n    this.hash = y+\",\"+x;\r\n}\r\n//===================================================\r\n\r\n//===================================================\r\n// Random Number Generator\r\nMath.seededRandom = function(max) {\r\n    Math.seed = (Math.seed * 9301 + 49297) % 233280;\r\n    var rnd = Math.seed / 233280;\r\n    return Math.round(rnd * max);\r\n}\r\n//===================================================\r\n\r\n//===================================================\r\n// Constants\r\n\r\n// Directions\r\nconst DOWN  = 0;\r\nconst UP    = 1;\r\nconst LEFT  = 2;\r\nconst RIGHT = 3;\r\n\r\n// Puzzle Cells\r\nconst EMPTY = 0;\r\nconst START = 1;\r\nconst END   = 2;\r\nconst BLOCK = 3;\r\n\r\n// Next move is Horizontal or Vertical\r\nconst UPDOWN    = 0;\r\nconst LEFTRIGHT = 1;\r\n\r\n// Next move is Left or Right if Horizontal or Up or Down if Vertical\r\nconst LEFTUP    = 0;\r\nconst RIGHTDOWN = 1;\r\n//===================================================\r\n\r\n//===================================================\r\n// Global Variables\r\n\r\nvar solution;\r\n\r\n// ArrayList<HashMap<Position,Integer>>\r\nvar reachPositions;\r\n// ArrayList<HashMap<Position,Position>>\r\nvar incomingDirections;\r\n\r\n// ArrayList<HashSet<Position>>\r\nvar solutionPositions;\r\n// ArrayList<Position>\r\nvar playerPositions;\r\nvar playerPositions_hash;\r\n// ArrayList<Position>\r\nvar blockPositions;\r\n// ArrayList<ArrayList<LinkedList<Position>>>\r\nvar unusedNextPositions;\r\n//===================================================\r\n\r\nfunction oppositeDirection(action) {\r\n    switch(action) {\r\n        case LEFT:\r\n            return RIGHT;\r\n        case RIGHT:\r\n            return LEFT;\r\n        case UP:\r\n            return DOWN;\r\n        case DOWN:\r\n            return UP;\r\n        default:\r\n            return -1;\r\n    }\r\n}\r\n\r\nfunction computePossibleNextPositions(puzzle, height, width, index, pos, vertOrHori) {\r\n    var options = [];\r\n    var leftup = [];\r\n    var rightdown = [];\r\n\r\n    let y = pos.y;\r\n    let x = pos.x;\r\n\r\n    var i;\r\n    var j;\r\n    var next;\r\n    var block;\r\n    switch(vertOrHori) {\r\n        case UPDOWN:\r\n            for(i = y-1; i > 0; i--) {\r\n                if(puzzle[i][x] === BLOCK) {\r\n                    break;\r\n                }\r\n                leftup.push(new Position(i,x));\r\n            }\r\n\r\n            for(i = y+1; i < height-1; i++) {\r\n                if(puzzle[i][x] === BLOCK) {\r\n                    break;\r\n                }\r\n                rightdown.push(new Position(i,x));\r\n            }\r\n\r\n            var currSolPositions;\r\n            for(i = 0; i < index; i++) {\r\n                currSolPositions = solutionPositions[i];\r\n                var leftRemove = [];\r\n                for(j = 0; j < leftup.length; j++) {\r\n                    next = leftup[j];\r\n                    block = new Position(next.y - 1, next.x);\r\n                    if(playerPositions_hash.includes(next.hash) || currSolPositions.has(block.hash) || reachPositions[index-1].has(next.hash)) {\r\n                        leftRemove.push(j);\r\n                    }\r\n                }\r\n                var rightRemove = [];\r\n                for(j = 0; j < rightdown.length; j++) {\r\n                    next = rightdown[j];\r\n                    block = new Position(next.y - 1, next.x);\r\n                    if(playerPositions_hash.includes(next.hash) || currSolPositions.has(block.hash) || reachPositions[index-1].has(next.hash)) {\r\n                        rightRemove.push(j);\r\n                    }\r\n                }\r\n                for(j = 0; j < leftRemove.length; j++) {\r\n                    leftup.splice(leftRemove[j],1);\r\n                }\r\n                for(j = 0; j < rightRemove.length; j++) {\r\n                    rightdown.splice(rightRemove[j],1);\r\n                }\r\n            }\r\n            break;\r\n        case LEFTRIGHT:\r\n            for(i = x-1; i > 0; i--) {\r\n                if(puzzle[y][i] === BLOCK) {\r\n                    break;\r\n                }\r\n                leftup.push(new Position(y,i));\r\n            }\r\n\r\n            for(i = x+1; i < width-1; i++) {\r\n                if(puzzle[y][i] === BLOCK) {\r\n                    break;\r\n                }\r\n                rightdown.push(new Position(y,i));\r\n            }\r\n\r\n            for(i = 0; i < index; i++) {\r\n                currSolPositions = solutionPositions[i];\r\n                var upRemove = [];\r\n                for(j = 0; j < leftup.length; j++) {\r\n                    next = leftup[j];\r\n                    block = new Position(next.y, next.x - 1);\r\n                    if(playerPositions_hash.includes(next.hash) || currSolPositions.has(block.hash) || reachPositions[index-1].has(next.hash)) {\r\n                        upRemove.push(j);\r\n                    }\r\n                }\r\n                var downRemove = [];\r\n                for(j = 0; j < rightdown.length; j++) {\r\n                    next = rightdown[j];\r\n                    block = new Position(next.y, next.x + 1);\r\n                    if(playerPositions_hash.includes(next.hash) || currSolPositions.has(block.hash) || reachPositions[index-1].has(next.hash)) {\r\n                        downRemove.push(j);\r\n                    }\r\n                }\r\n                for(j = 0; j < upRemove.length; j++) {\r\n                    leftup.splice(upRemove[j],1);\r\n                }\r\n                for(j = 0; j < downRemove.length; j++) {\r\n                    rightdown.splice(downRemove[j],1);\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    \r\n    var change;\r\n    var temp;\r\n    for(i = 0; i < leftup.length; i++) {\r\n        change = i + Math.seededRandom(leftup.length - i - 1);\r\n        temp = leftup[change];\r\n        leftup.splice(change, 1, leftup[i]);\r\n        leftup.splice(i, 1, temp);\r\n    }\r\n    for(i = 0; i < rightdown.length; i++) {\r\n        change = i + Math.seededRandom(rightdown.length - i - 1);\r\n        temp = rightdown[change];\r\n        rightdown.splice(change, 1, rightdown[i]);\r\n        rightdown.splice(i, 1, temp);\r\n    }\r\n    \r\n    options.push(leftup);\r\n    options.push(rightdown);\r\n    return options;\r\n}\r\n\r\nfunction computePossibleEndPositions(puzzle, height, width, length, index, pos, vertOrHori) {\r\n    var options = [];\r\n    var leftup = [];\r\n    var rightdown = [];\r\n\r\n    let y = pos.y;\r\n    let x = pos.x;\r\n\r\n    var i;\r\n    var next;\r\n    switch(vertOrHori) {\r\n        case UPDOWN:\r\n            for(i = y-1; i > 0; i--) {\r\n                if(puzzle[i][x] === BLOCK) {\r\n                    break;\r\n                }\r\n                next = new Position(i,x);\r\n                if(reachPositions[index].get(next.hash) === length) {\r\n                    leftup.push(next);\r\n                }\r\n            }\r\n\r\n            for(i = y+1; i < height-1; i++) {\r\n                if(puzzle[i][x] === BLOCK) {\r\n                    break;\r\n                }\r\n                next = new Position(i,x);\r\n                if(reachPositions[index].get(next.hash) === length) {\r\n                    rightdown.push(next);\r\n                }\r\n            }\r\n            break;\r\n        case LEFTRIGHT:\r\n            for(i = x-1; i > 0; i--) {\r\n                if(puzzle[y][i] === BLOCK) {\r\n                    break;\r\n                }\r\n                next = new Position(y,i);\r\n                if(reachPositions[index].get(next.hash) === length) {\r\n                    leftup.push(next);\r\n                }\r\n            }\r\n\r\n            for(i = x+1; i < width-1; i++) {\r\n                if(puzzle[y][i] === BLOCK) {\r\n                    break;\r\n                }\r\n                next = new Position(y,i);\r\n                if(reachPositions[index].get(next.hash) === length) {\r\n                    rightdown.push(next);\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    \r\n    var change;\r\n    var temp;\r\n    for(i = 0; i < leftup.length; i++) {\r\n        change = i + Math.seededRandom(leftup.length - i - 1);\r\n        temp = leftup[change];\r\n        leftup.splice(change, 1, leftup[i]);\r\n        leftup.splice(i, 1, temp);\r\n    }\r\n    for(i = 0; i < rightdown.length; i++) {\r\n        change = i + Math.seededRandom(rightdown.length - i - 1);\r\n        temp = rightdown[change];\r\n        rightdown.splice(change, 1, rightdown[i]);\r\n        rightdown.splice(i, 1, temp);\r\n    }\r\n    \r\n    options.push(leftup);\r\n    options.push(rightdown);\r\n    return options;\r\n}\r\n\r\nfunction computeReachability(puzzle, height, width, prev_reachSet, prev_incomingSet, index, start, direction) {\r\n    var reachSet = prev_reachSet;\r\n    var incomingSet = prev_incomingSet;\r\n\r\n    if(direction === -1) {\r\n        reachSet.set(start.hash, 0);\r\n        incomingSet.set(start.hash, start.hash);\r\n    }\r\n\r\n    var posQueue = [];\r\n    var dirQueue = [];\r\n\r\n    var possibilities = [];\r\n    switch(direction) {\r\n        case LEFT:\r\n            possibilities.push(DOWN);\r\n            possibilities.push(UP);\r\n            break;\r\n        case RIGHT:\r\n            possibilities.push(DOWN);\r\n            possibilities.push(UP);\r\n            break;\r\n        case UP:\r\n            possibilities.push(LEFT);\r\n            possibilities.push(RIGHT);\r\n            break;\r\n        case DOWN:\r\n            possibilities.push(LEFT);\r\n            possibilities.push(RIGHT);\r\n            break;\r\n        default:\r\n            possibilities.push(DOWN);\r\n            possibilities.push(UP);\r\n            possibilities.push(LEFT);\r\n            possibilities.push(RIGHT);\r\n            break;\r\n        \r\n    }\r\n\r\n    while(possibilities.length > 0) {\r\n        posQueue.push(start);\r\n        dirQueue.push(possibilities.pop());\r\n    }\r\n\r\n    while(posQueue.length > 0 && dirQueue.length > 0) {\r\n\r\n        let pos = posQueue.shift();\r\n        let action = dirQueue.shift();\r\n        let length = reachSet.get(pos.hash) + 1;\r\n        var repeat = true;\r\n        let y = pos.y;\r\n        let x = pos.x;\r\n\r\n        var i;\r\n        var next;\r\n        switch(action) {\r\n            case LEFT:\r\n                for(i = x-1; i >= 0; i--) {\r\n                    next = new Position(y, i+1);\r\n                    if(!reachSet.has(next.hash)) {\r\n                        reachSet.set(next.hash,length);\r\n                        incomingSet.set(next.hash,pos.hash);\r\n                        repeat = false;\r\n                    }\r\n\r\n                    if((i === 0 && puzzle[y][i] === EMPTY) || (puzzle[y][i] === END)) {\r\n                        next = new Position(y, i);\r\n                        if(!reachSet.has(next.hash)) {\r\n                            reachSet.set(next.hash,length);\r\n                            incomingSet.set(next.hash,pos.hash);\r\n                        }\r\n                        break;\r\n                    } else if(puzzle[y][i] === BLOCK) {\r\n                        if(!repeat) {\r\n                            posQueue.push(next);\r\n                            dirQueue.push(UP);\r\n                            posQueue.push(next);\r\n                            dirQueue.push(DOWN);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            case RIGHT:\r\n                for(i = x+1; i < width; i++) {\r\n                    next = new Position(y, i-1);\r\n\r\n                    if(!reachSet.has(next.hash)) {\r\n                        reachSet.set(next.hash,length);\r\n                        incomingSet.set(next.hash,pos.hash);\r\n                        repeat = false;\r\n                    }\r\n\r\n                    if((i === width - 1 && puzzle[y][i] === EMPTY) || (puzzle[y][i] === END)) {\r\n                        next = new Position(y, i);\r\n                        if(!reachSet.has(next.hash)) {\r\n                            reachSet.set(next.hash,length);\r\n                            incomingSet.set(next.hash,pos.hash);\r\n                        }\r\n                        break;\r\n                    } else if(puzzle[y][i] === BLOCK) {\r\n                        if(!repeat) {\r\n                            posQueue.push(next);\r\n                            dirQueue.push(UP);\r\n                            posQueue.push(next);\r\n                            dirQueue.push(DOWN);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            case UP:\r\n                for(i = y-1; i >= 0; i--) {\r\n                    next = new Position(i+1, x);\r\n\r\n                    if(!reachSet.has(next.hash)) {\r\n                        reachSet.set(next.hash,length);\r\n                        incomingSet.set(next.hash,pos.hash);\r\n                        repeat = false;\r\n                    }\r\n\r\n                    if((i === 0 && puzzle[i][x] === EMPTY) || (puzzle[i][x] === END)) {\r\n                        next = new Position(i, x);\r\n                        if(!reachSet.has(next.hash)) {\r\n                            reachSet.set(next.hash,length);\r\n                            incomingSet.set(next.hash,pos.hash);\r\n                        }\r\n                        break;\r\n                    } else if(puzzle[i][x] === BLOCK) {\r\n                        if(!repeat) {\r\n                            posQueue.push(next);\r\n                            dirQueue.push(LEFT);\r\n                            posQueue.push(next);\r\n                            dirQueue.push(RIGHT);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            case DOWN:\r\n                for(i = y+1; i < height; i++) {\r\n                    next = new Position(i-1, x);\r\n\r\n                    if(!reachSet.has(next.hash)) {\r\n                        reachSet.set(next.hash,length);\r\n                        incomingSet.set(next.hash,pos.hash);\r\n                        repeat = false;\r\n                    }\r\n\r\n                    if((i === height - 1 && puzzle[i][x] === EMPTY) || (puzzle[i][x] === END)) {\r\n                        next = new Position(i, x);\r\n                        if(!reachSet.has(next.hash)) {\r\n                            reachSet.set(next.hash,length);\r\n                            incomingSet.set(next.hash,pos.hash);\r\n                        }\r\n                        break;\r\n                    } else if(puzzle[i][x] === BLOCK) {\r\n                        if(!repeat) {\r\n                            posQueue.push(next);\r\n                            dirQueue.push(LEFT);\r\n                            posQueue.push(next);\r\n                            dirQueue.push(RIGHT);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    reachPositions.splice(index,1,reachSet);\r\n\tincomingDirections.splice(index,1,incomingSet);\r\n}\r\n\r\nfunction addPosition(index, pos1, pos2, direction) {\r\n    let y = pos2.y;\r\n    let x = pos2.x;\r\n    var addPositions = new Map();\r\n\r\n    var i;\r\n    var pos;\r\n    switch(direction) {\r\n        case LEFT:\r\n            for(i = pos1.x; i >= x; i--) {\r\n                pos = new Position(y, i);\r\n                addPositions.set(pos.hash, pos);\r\n            }\r\n            break;\r\n        case RIGHT:\r\n            for(i = pos1.x; i <= x; i++) {\r\n                pos = new Position(y, i);\r\n                addPositions.set(pos.hash, pos);\r\n            }\r\n            break;\r\n        case UP:\r\n            for(i = pos1.y; i >= y; i--) {\r\n                pos = new Position(i, x);\r\n                addPositions.set(pos.hash, pos);\r\n            }\r\n            break;\r\n        case DOWN:\r\n            for(i = pos1.y; i <= y; i++) {\r\n                pos = new Position(i, x);\r\n                addPositions.set(pos.hash, pos);\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    solutionPositions.splice(index, 1, addPositions);\r\n}\r\n\r\nfunction addBlock(puzzle, index, pos, direction) {\r\n    let y = pos.y;\r\n    let x = pos.x;\r\n\r\n    var block;\r\n    switch(direction) {\r\n        case LEFT:\r\n            puzzle[y][x-1] = BLOCK;\r\n            block = new Position(y, x-1);\r\n            break;\r\n        case RIGHT:\r\n            puzzle[y][x+1] = BLOCK;\r\n            block = new Position(y, x+1);\r\n            break;\r\n        case UP:\r\n            puzzle[y-1][x] = BLOCK;\r\n\t\t\tblock = new Position(y-1, x);\r\n            break;\r\n        case DOWN:\r\n            puzzle[y+1][x] = BLOCK;\r\n\t\t\tblock = new Position(y+1, x);\r\n            break;\r\n        default:\r\n            block = new Position(-1,-1);\r\n            break;\r\n    }\r\n\r\n    solutionPositions[index].set(block.hash,block);\r\n    blockPositions.splice(index, 1, block);\r\n    \r\n\tlet isReach = reachPositions[index-1].has(block.hash);\r\n\r\n    return isReach;\r\n}\r\n\r\nfunction removePosition(puzzle, index) {\r\n    const pos = blockPositions[index];\r\n    const y = pos.y;\r\n    const x = pos.x;\r\n    puzzle[y][x] = EMPTY;\r\n}\r\n\r\n//===================================================\r\n// Path Generation\r\nfunction generatePath(puzzle, height, width, length) {\r\n    var startVertOrHori = Math.seededRandom(1) === 0 ? UPDOWN : LEFTRIGHT;\r\n    if(tryStart(puzzle, height, width, length, startVertOrHori)) {\r\n        return playerPositions[length];\r\n    }\r\n    startVertOrHori = startVertOrHori === UPDOWN ? LEFTRIGHT : UPDOWN;\r\n    if(tryStart(puzzle, height, width, length, startVertOrHori)) {\r\n        return playerPositions[length];\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction tryStart(puzzle, height, width, length, vertOrHori) {\r\n    let count = 0;\r\n    let max = 0;\r\n\r\n    var success = generateStartMove(puzzle, height, width, count, vertOrHori);\r\n    if(!success) {\r\n        return false;\r\n    }\r\n\r\n    while(count < (length-1)) {\r\n        if(count === (length-2)) {\r\n            success = generateEndMove(puzzle, height, width, count, length, vertOrHori);\r\n            if(success) {\r\n                return true;\r\n            }\r\n        } else {\r\n            success = generateSingleMove(puzzle, height, width, count, vertOrHori);\r\n        }\r\n        vertOrHori = vertOrHori === UPDOWN ? LEFTRIGHT : UPDOWN;\r\n        if(success) {\r\n            count += 1;\r\n        } else {\r\n            removePosition(puzzle,count);\r\n            count -= 1;\r\n        }\r\n\r\n        if(count > max) {\r\n            max = count;\r\n        }\r\n\r\n        if(count === -1 || count <= (max - 2)) {\r\n            while(count > -1) {\r\n                removePosition(puzzle,count);\r\n                count--;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction generateStartMove(puzzle, height, width, index, vertOrHori) {\r\n    let start = playerPositions[index];\r\n    computeReachability(puzzle, height, width, new Map(), new Map(), index, start, -1);\r\n    let options = computePossibleNextPositions(puzzle, height, width, index, start, vertOrHori);\r\n    unusedNextPositions[index] = options;\r\n    if((options[0].length === 0) && (options[1].length === 0)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction generateSingleMove(puzzle, height, width, index, vertOrHori) {\r\n    let current = playerPositions[index];\r\n\r\n    var direction;\r\n    var options = unusedNextPositions[index];\r\n    if(options[0].length > 0 && options[1].length > 0) {\r\n        if(Math.seededRandom(1) === 0) {\r\n            direction = vertOrHori === UPDOWN ? UP : LEFT;\r\n        } else {\r\n            direction = vertOrHori === UPDOWN ? DOWN : RIGHT;\r\n        }\r\n    } else if(options[0].length > 0) {\r\n        direction = vertOrHori === UPDOWN ? UP : LEFT;\r\n    } else if(options[1].length > 0) {\r\n        direction = vertOrHori === UPDOWN ? DOWN : RIGHT;\r\n    } else {\r\n        return false;\r\n    }\r\n\r\n    vertOrHori = vertOrHori === UPDOWN ? LEFTRIGHT : UPDOWN;\r\n\tvar directionIdx = ((direction === LEFT) || (direction === UP)) ? LEFTUP : RIGHTDOWN;\r\n\tvar possibleNext = options[directionIdx];\r\n    var nextPos;\r\n    do {\r\n        if(possibleNext.length === 0) {\r\n            direction = oppositeDirection(direction);\r\n            directionIdx = directionIdx === RIGHTDOWN ? LEFTUP : RIGHTDOWN;\r\n            possibleNext = unusedNextPositions[index][directionIdx];\r\n            if(possibleNext.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        nextPos = possibleNext.shift();\r\n        options = computePossibleNextPositions(puzzle, height, width, index + 1, nextPos, vertOrHori);\r\n    } while(options[0].length === 0 && options[1].length === 0);\r\n\r\n    solution.splice(index,1,direction);\r\n\r\n    addPosition(index+1, current, nextPos, direction);\r\n    let isReach = addBlock(puzzle, index+1, nextPos, direction);\r\n\r\n    unusedNextPositions.splice(index+1,1,options);\r\n    playerPositions.splice(index+1,1,nextPos);\r\n    playerPositions_hash.splice(index+1,1,nextPos.hash);\r\n\tif(!isReach) {\r\n        computeReachability(puzzle, height, width, reachPositions[index], incomingDirections[index],  index+1, nextPos, direction);\r\n\t} else {\r\n\t\tlet start = playerPositions[0];\r\n\t\tcomputeReachability(puzzle, height, width, new Map(), new Map(), index+1, start, -1);\r\n    }\r\n\treturn true;\r\n}\r\n\r\nfunction generateEndMove(puzzle, height, width, index, length, vertOrHori) {\r\n    let current = playerPositions[index];\r\n\r\n    var direction;\r\n    var options = unusedNextPositions[index];\r\n    if(options[0].length > 0 && options[1].length > 0) {\r\n        if(Math.seededRandom(1) === 0) {\r\n            direction = vertOrHori === UPDOWN ? UP : LEFT;\r\n        } else {\r\n            direction = vertOrHori === UPDOWN ? DOWN : RIGHT;\r\n        }\r\n    } else if(options[0].length > 0) {\r\n        direction = vertOrHori === UPDOWN ? UP : LEFT;\r\n    } else if(options[1].length > 0) {\r\n        direction = vertOrHori === UPDOWN ? DOWN : RIGHT;\r\n    } else {\r\n        return false;\r\n    }\r\n\r\n    vertOrHori = vertOrHori === UPDOWN ? LEFTRIGHT : UPDOWN;\r\n\tvar directionIdx = ((direction === LEFT) || (direction === UP)) ? LEFTUP : RIGHTDOWN;\r\n    var possibleNext = options[directionIdx];\r\n\r\n    const start = playerPositions[0];\r\n    var nextPos;\r\n    var testPos;\r\n    do {\r\n        if(possibleNext.length === 0) {\r\n            direction = oppositeDirection(direction);\r\n            directionIdx = directionIdx === RIGHTDOWN ? LEFTUP : RIGHTDOWN;\r\n            possibleNext = unusedNextPositions[index][directionIdx];\r\n            if(possibleNext.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n        nextPos = possibleNext.shift();\r\n        switch(direction) {\r\n            case LEFT:\r\n                testPos = new Position(nextPos.y, nextPos.x - 1);\r\n                break;\r\n            case RIGHT:\r\n                testPos = new Position(nextPos.y, nextPos.x + 1);\r\n                break;\r\n            case UP:\r\n                testPos = new Position(nextPos.y - 1, nextPos.x);\r\n                break;\r\n            case DOWN:\r\n                testPos = new Position(nextPos.y + 1, nextPos.x);\r\n                break;\r\n            default:\r\n                testPos = new Position(nextPos.y, nextPos.x);\r\n                break;\r\n        }\r\n        if(!solutionPositions[index].has(testPos.hash)) {\r\n            puzzle[testPos.y][testPos.x] = BLOCK;\r\n            computeReachability(puzzle, height, width, new Map(), new Map(), index+1, start, -1);\r\n            options = computePossibleEndPositions(puzzle, height, width, length, index+1, nextPos, vertOrHori);\r\n            if(options[0].length === 0 && options[1].length === 0) {\r\n                puzzle[testPos.y][testPos.x] = EMPTY;\r\n            }\r\n        }\r\n    } while(options[0].length === 0 && options[1].length === 0);\r\n\r\n    solution.splice(index,1,direction);\r\n    addPosition(index+1, current, nextPos, direction);\r\n    addBlock(puzzle, index+1, nextPos, direction);\r\n    playerPositions.splice(index+1,1,nextPos);\r\n    playerPositions_hash.splice(index+1,1,nextPos.hash);\r\n\r\n    current = nextPos;\r\n    if(options[0].length > 0 && options[1].length > 0) {\r\n        if(Math.seededRandom(1) === 0) {\r\n            direction = vertOrHori === UPDOWN ? UP : LEFT;\r\n            possibleNext = options[0];\r\n        } else {\r\n            direction = vertOrHori === UPDOWN ? DOWN : RIGHT;\r\n            possibleNext = options[1];\r\n        }\r\n    } else if(options[0].length > 0) {\r\n        direction = vertOrHori === UPDOWN ? UP : LEFT;\r\n        possibleNext = options[0];\r\n    } else if(options[1].length > 0) {\r\n        direction = vertOrHori === UPDOWN ? DOWN : RIGHT;\r\n        possibleNext = options[1];\r\n    } else {\r\n        return false;\r\n    }\r\n    \r\n\tnextPos = possibleNext.shift();\r\n\taddPosition(index+2, current, nextPos, direction);\r\n    playerPositions.splice(index+2,1,nextPos);\r\n    playerPositions_hash.splice(index+2,1,nextPos.hash);\r\n\tsolution.splice(index+1,1,direction);\r\n\tpuzzle[nextPos.y][nextPos.x] = END;\r\n\r\n    return true;\r\n}\r\n//===================================================\r\n\r\n\r\n//===================================================\r\n// Fake Block Codes\r\nfunction addFakePosition(puzzle, combined_allPositions, pos1, pos2, action) {\r\n    const y = pos2.y;\r\n    const x = pos2.x;\r\n\r\n    let i;\r\n    let new_pos;\r\n    switch(action) {\r\n        case LEFT:\r\n            for(i = pos1.x; i >= x; i--) {\r\n                if(puzzle[y][i] === EMPTY) {\r\n                    new_pos = new Position(y, i);    \r\n                    combined_allPositions.set(new_pos.hash, new_pos);\r\n                }\r\n            }\r\n            break;\r\n        case RIGHT:\r\n            for(i = pos1.x; i <= x; i++) {\r\n                if(puzzle[y][i] === EMPTY) {\r\n                    new_pos = new Position(y, i);    \r\n                    combined_allPositions.set(new_pos.hash, new_pos);\r\n                }\r\n            }\r\n            break;\r\n        case UP:\r\n            for(i = pos1.y; i >= y; i--) {\r\n                if(puzzle[i][x] === EMPTY) {\r\n                    new_pos = new Position(i, x);    \r\n                    combined_allPositions.set(new_pos.hash, new_pos);\r\n                }\r\n            }\r\n            break;\r\n        case DOWN:\r\n            for(i = pos1.y; i <= y; i++) {\r\n                if(puzzle[i][x] === EMPTY) {\r\n                    new_pos = new Position(i, x);    \r\n                    combined_allPositions.set(new_pos.hash, new_pos);\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return combined_allPositions;\r\n}\r\n\r\nfunction pathDirection(pos1, pos2) {\r\n    if(pos1.x === pos2.x) {\r\n        if(pos1.y < pos2.y) {\r\n            return DOWN;\r\n        } else if(pos1.y > pos2.y) {\r\n            return UP;\r\n        }\r\n    } else if(pos1.y === pos2.y) {\r\n        if(pos1.x < pos2.x) {\r\n            return RIGHT;\r\n        } else if(pos1.x > pos2.x) {\r\n            return LEFT;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nfunction addFakeBlocks(puzzle, height, width, start, end, length, numBlocks) {\r\n    let fake_blocks = [];\r\n\r\n    computeReachability(puzzle, height, width, new Map(), new Map(), 0, start, -1);\r\n    let old_reachSet = reachPositions[0];\r\n    let old_incomingSet = incomingDirections[0];\r\n\r\n    for(let i = 0; i < numBlocks; i++) {\r\n        let reachSet = old_reachSet;\r\n        let incomingSet = old_incomingSet;\r\n        \r\n        let combined_allPositions = new Map();               \r\n        for(let j = 0; j < solutionPositions.length; j++) {\r\n            let map = solutionPositions[j];\r\n            for(const pos_hash of map.keys()) {\r\n                combined_allPositions.set(pos_hash,map[pos_hash]);\r\n            }\r\n        }\r\n        \r\n        let reachNotAll = new Map();\r\n        let possible = [];\r\n        for(const pos_hash of incomingSet.keys()) {\r\n            if(!combined_allPositions.has(pos_hash)) {\r\n                let arr = pos_hash.split(\",\");\r\n                let pos = new Position(Number(arr[0]),Number(arr[1]));\r\n                reachNotAll.set(pos_hash,pos);\r\n                possible.push(pos);\r\n            }\r\n        }\r\n        \r\n        let update = false;\r\n        while(possible.length !== 0 && !update) {\r\n            let pos = possible.splice(Math.seededRandom(possible.length - 1),1)[0];\r\n            let arr = incomingSet.get(pos.hash).split(\",\");\r\n            let pos2 = new Position(Number(arr[0]),Number(arr[1]));\r\n            let action = pathDirection(pos2,pos);\r\n\r\n            let block;\r\n\r\n            const y = pos.y;\r\n            const x = pos.x;\r\n            switch(action) {\r\n                case LEFT:\r\n                    if((x - 1) < 0) {\r\n                        continue;\r\n                    }\r\n                    block = new Position(y, x-1);\r\n                    break;\r\n                case RIGHT:\r\n                    if((x + 1) >= width) {\r\n                        continue;\r\n                    }\r\n                    block = new Position(y, x+1);\r\n                    break;\r\n                case UP:\r\n                    if((y - 1) < 0) {\r\n                        continue;\r\n                    }\r\n                    block = new Position(y-1, x);\r\n                    break;\r\n                case DOWN:\r\n                    if((x + 1) < height) {\r\n                        continue;\r\n                    }\r\n                    block = new Position(y+1, x);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if(combined_allPositions.has(block) || puzzle[block.y][block.x] !== EMPTY || puzzle[pos.y][pos.x] !== EMPTY) {\r\n                continue;\r\n            }\r\n\r\n            puzzle[block.y][block.x] = BLOCK;\r\n            computeReachability(puzzle, height, width, new Map(), new Map(), 0, start, -1);\r\n            reachSet = reachPositions[0];\r\n            incomingSet = incomingDirections[0];\r\n\r\n            if(reachSet.get(end.hash) === length) {\r\n                update = true;\r\n                fake_blocks.push(block);\r\n                combined_allPositions = addFakePosition(puzzle, combined_allPositions,  pos, old_incomingSet.get(pos.hash), action);\r\n                old_reachSet = reachSet;\r\n                old_incomingSet = incomingSet;\r\n            } else {\r\n                puzzle[block.y][block.x] = EMPTY;\r\n                reachSet = old_reachSet;\r\n                incomingSet = old_incomingSet;\r\n            }\r\n        }\r\n        if(possible.length === 0) {\r\n            return fake_blocks;\r\n        }\r\n    }\r\n    return fake_blocks;\r\n}\r\n//===================================================\r\n\r\nfunction makePuzzle(seed, fake, width, height) {\r\n    // Seed Random Generator\r\n    Math.seed = seed;\r\n\r\n    // Set Length of Solution\r\n    let length;\r\n    if(width >= height) {\r\n        length = ((height * 3) / 4) + Math.seededRandom(height / 2);\r\n    } else {\r\n        length = ((width * 3) / 4) + Math.seededRandom(width / 2);\r\n    }\r\n\r\n    // Initialize Puzzle Array\r\n    var puzzle = [];\r\n    for(var i = 0; i < height; i++) {\r\n        puzzle[i] = [];\r\n        for(var j = 0; j < width; j++) {\r\n            puzzle[i].push(0);\r\n        }\r\n    }\r\n\r\n    var remainingStarts = [];\r\n    for(var y = 0; y < height; y++) {\r\n        for(var x = 0; x < width; x++) {\r\n            remainingStarts.push(new Position(y, x));\r\n        }\r\n    }\r\n\r\n    var start = new Position(0,0);\r\n    var goal;\r\n    do {\r\n        // Initialize global Structures\r\n        solution = [];\r\n        solutionPositions = [];\r\n        playerPositions = [];\r\n        playerPositions_hash = [];\r\n        blockPositions = [];\r\n        reachPositions = [];\r\n        incomingDirections = [];\r\n        unusedNextPositions = [];\r\n\r\n        for(i = 0; i < length; i++) {\r\n            solution.push(-1);\r\n            solutionPositions.push(new Map());\r\n            playerPositions.push(new Position(-1,-1));\r\n            playerPositions_hash.push(\"-1,-1\");\r\n            blockPositions.push(new Position(-1,-1));\r\n            reachPositions.push(new Map());\r\n            incomingDirections.push(new Map());\r\n            unusedNextPositions.push([]);\r\n        }\r\n\r\n        start = remainingStarts.splice(Math.seededRandom(remainingStarts.length - 1), 1)[0];\r\n        puzzle[start.y][start.x] = START;\r\n\r\n        solutionPositions[0].set(start.hash, start);\r\n        playerPositions.splice(0,1,start);\r\n        playerPositions_hash.splice(0,1,start.hash);\r\n        blockPositions.splice(0,1,start);\r\n\r\n        goal = generatePath(puzzle, height, width, length);\r\n    } while (goal == null &&  remainingStarts.length > 0);\r\n\r\n    if(goal == null) {\r\n        return null;\r\n    }\r\n\r\n    //Remove Start Position from Block Positions\r\n    blockPositions.splice(0,1);\r\n    \r\n    // Add Fake Blocks Here if \"fake\" is true\r\n    if(fake) {\r\n        let numBlocks = Math.floor(length / 2) + Math.seededRandom(Math.floor(length / 4));\r\n        let fake_blocks = addFakeBlocks(puzzle, height, width, start, goal, length, numBlocks)\r\n        blockPositions = blockPositions.concat(fake_blocks);\r\n    }\r\n    \r\n\r\n    return {\r\n        start: start,\r\n        goal: goal,\r\n        blocks: blockPositions\r\n    }\r\n}\r\n\r\nvar PuzzleMaker = {\r\n    makePuzzle\r\n}\r\n\r\nmodule.exports = PuzzleMaker;\r\nexport default PuzzleMaker;"],"sourceRoot":""}